'use client'

import { useState, useRef, useEffect } from 'react'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Input } from '@/components/ui/input'
import { ScrollArea } from '@/components/ui/scroll-area'
import { 
  MessageSquare, 
  X, 
  Send, 
  Bot, 
  User, 
  Globe,
  Clock,
  HelpCircle,
  Phone,
  Mail
} from 'lucide-react'

interface Message {
  id: string
  text: string
  sender: 'user' | 'bot'
  timestamp: Date
  language?: string
}

interface FAQ {
  id: string
  question: string
  answer: string
  category: string
  keywords: string[]
  language: 'en' | 'hi' | 'bn' | 'ta' | 'te'
}

const faqs: FAQ[] = [
  // English FAQs
  {
    id: 'en-1',
    question: 'What are the admission requirements for B.Tech?',
    answer: 'For B.Tech admission, you need 10+2 with Physics, Chemistry, and Mathematics with minimum 60% aggregate marks (55% for SC/ST). You must have a valid JEE Main score or REU Entrance Test score. Age limit is 17-25 years as on 1st July.',
    category: 'Admissions',
    keywords: ['admission', 'btech', 'requirements', 'eligibility', 'jee'],
    language: 'en'
  },
  {
    id: 'en-2',
    question: 'What is the fee structure for B.Tech programs?',
    answer: 'The total fee for B.Tech programs is тВ╣1,40,000 per annum, including tuition fee (тВ╣95,000), development fee (тВ╣15,000), examination fee (тВ╣10,000), library fee (тВ╣5,000), laboratory fee (тВ╣8,000), and other fees (тВ╣7,000). Scholarships are available for meritorious students.',
    category: 'Fees',
    keywords: ['fee', 'btech', 'cost', 'structure', 'tuition'],
    language: 'en'
  },
  {
    id: 'en-3',
    question: 'When is the last date for application submission?',
    answer: 'The last date for application submission for the 2024-25 academic session is June 30, 2024. However, it\'s recommended to apply early as seats are filled on a first-come-first-served basis.',
    category: 'Admissions',
    keywords: ['deadline', 'last date', 'application', 'submission'],
    language: 'en'
  },
  {
    id: 'en-4',
    question: 'What hostel facilities are available?',
    answer: 'REU provides separate hostels for boys and girls with facilities like Wi-Fi, mess, gym, study rooms, and laundry. Boys Hostel A has AC/Non-AC options for 400 students, Boys Hostel B is Non-AC for 350 students, and Girls Hostel has AC/Non-AC options for 300 students. Fees range from тВ╣45,000 to тВ╣90,000 per annum.',
    category: 'Hostel',
    keywords: ['hostel', 'facilities', 'accommodation', 'mess', 'wifi'],
    language: 'en'
  },
  {
    id: 'en-5',
    question: 'What sports facilities are available on campus?',
    answer: 'REU has excellent sports facilities including cricket ground, football field, basketball courts, indoor sports complex, swimming pool, and tennis courts. All facilities are open from 6:00 AM to 8:00 PM. The indoor complex is open until 10:00 PM.',
    category: 'Sports',
    keywords: ['sports', 'facilities', 'cricket', 'football', 'basketball'],
    language: 'en'
  },
  
  // Hindi FAQs
  {
    id: 'hi-1',
    question: 'рдмреА.рдЯреЗрдХ рдореЗрдВ рдкреНрд░рд╡реЗрд╢ рдХреЗ рд▓рд┐рдП рдЖрд╡рд╢реНрдпрдХрддрд╛рдПрдБ рдХреНрдпрд╛ рд╣реИрдВ?',
    answer: 'рдмреА.рдЯреЗрдХ рдкреНрд░рд╡реЗрд╢ рдХреЗ рд▓рд┐рдП рдЖрдкрдХреЗ рдкрд╛рд╕ рднреМрддрд┐рдХреА, рд░рд╕рд╛рдпрди рдФрд░ рдЧрдгрд┐рдд рдХреЗ рд╕рд╛рде 10+2 рд╣реЛрдирд╛ рдЪрд╛рд╣рд┐рдП рдФрд░ рдиреНрдпреВрдирддрдо 60% рдПрдЧреНрд░реАрдЧреЗрдЯ рдЕрдВрдХ (рдПрд╕рд╕реА/рдПрд╕рдЯреА рдХреЗ рд▓рд┐рдП 55%) рд╣реЛрдиреЗ рдЪрд╛рд╣рд┐рдПред рдЖрдкрдХреЗ рдкрд╛рд╕ рд╡реИрдз рдЬреЗрдИ рдореЗрди рд╕реНрдХреЛрд░ рдпрд╛ рдЖрд░рдИрдпреВ рдкреНрд░рд╡реЗрд╢ рдкрд░реАрдХреНрд╖рд╛ рд╕реНрдХреЛрд░ рд╣реЛрдирд╛ рдЪрд╛рд╣рд┐рдПред рдЖрдпреБ рд╕реАрдорд╛ 1 рдЬреБрд▓рд╛рдИ рдХреЛ 17-25 рд╡рд░реНрд╖ рд╣реИред',
    category: 'рдкреНрд░рд╡реЗрд╢',
    keywords: ['рдкреНрд░рд╡реЗрд╢', 'рдмреАрдЯреЗрдХ', 'рдЖрд╡рд╢реНрдпрдХрддрд╛рдПрдБ', 'рдкрд╛рддреНрд░рддрд╛', 'рдЬреЗрдИ'],
    language: 'hi'
  },
  {
    id: 'hi-2',
    question: 'рдмреА.рдЯреЗрдХ рдкреНрд░реЛрдЧреНрд░рд╛рдо рдХреЗ рд▓рд┐рдП рдлреАрд╕ рд╕рдВрд░рдЪрдирд╛ рдХреНрдпрд╛ рд╣реИ?',
    answer: 'рдмреА.рдЯреЗрдХ рдкреНрд░реЛрдЧреНрд░рд╛рдо рдХреЗ рд▓рд┐рдП рдХреБрд▓ рдлреАрд╕ рдкреНрд░рддрд┐ рд╡рд░реНрд╖ тВ╣1,40,000 рд╣реИ, рдЬрд┐рд╕рдореЗрдВ рдЯреНрдпреВрд╢рди рдлреАрд╕ (тВ╣95,000), рд╡рд┐рдХрд╛рд╕ рд╢реБрд▓реНрдХ (тВ╣15,000), рдкрд░реАрдХреНрд╖рд╛ рд╢реБрд▓реНрдХ (тВ╣10,000), рд▓рд╛рдЗрдмреНрд░реЗрд░реА рд╢реБрд▓реНрдХ (тВ╣5,000), рдкреНрд░рдпреЛрдЧрд╢рд╛рд▓рд╛ рд╢реБрд▓реНрдХ (тВ╣8,000), рдФрд░ рдЕрдиреНрдп рд╢реБрд▓реНрдХ (тВ╣7,000) рд╢рд╛рдорд┐рд▓ рд╣реИрдВред рдореЗрдзрд╛рд╡реА рдЫрд╛рддреНрд░реЛрдВ рдХреЗ рд▓рд┐рдП рдЫрд╛рддреНрд░рд╡реГрддреНрддрд┐ рдЙрдкрд▓рдмреНрдз рд╣реИред',
    category: 'рдлреАрд╕',
    keywords: ['рдлреАрд╕', 'рдмреАрдЯреЗрдХ', 'рд▓рд╛рдЧрдд', 'рд╕рдВрд░рдЪрдирд╛', 'рдЯреНрдпреВрд╢рди'],
    language: 'hi'
  },
  {
    id: 'hi-3',
    question: 'рдЖрд╡реЗрджрди рдЬрдорд╛ рдХрд░рдиреЗ рдХреА рдЕрдВрддрд┐рдо рддрд┐рдерд┐ рдХреНрдпрд╛ рд╣реИ?',
    answer: '2024-25 рд╢реИрдХреНрд╖рдгрд┐рдХ рд╕рддреНрд░ рдХреЗ рд▓рд┐рдП рдЖрд╡реЗрджрди рдЬрдорд╛ рдХрд░рдиреЗ рдХреА рдЕрдВрддрд┐рдо рддрд┐рдерд┐ 30 рдЬреВрди, 2024 рд╣реИред рд╣рд╛рд▓рд╛рдВрдХрд┐, рд╕реАрдЯреЗрдВ рдкрд╣рд▓реЗ рдЖрдУ-рдкрд╣рд▓реЗ рдкрд╛рдУ рдХреЗ рдЖрдзрд╛рд░ рдкрд░ рднрд░реА рдЬрд╛рддреА рд╣реИрдВ, рдЗрд╕рд▓рд┐рдП рдЬрд▓реНрджреА рдЖрд╡реЗрджрди рдХрд░рдиреЗ рдХреА рд╕рд▓рд╛рд╣ рджреА рдЬрд╛рддреА рд╣реИред',
    category: 'рдкреНрд░рд╡реЗрд╢',
    keywords: ['рдЕрдВрддрд┐рдо рддрд┐рдерд┐', 'рдЖрд╡реЗрджрди', 'рдЬрдорд╛', 'рдбреЗрдбрд▓рд╛рдЗрди'],
    language: 'hi'
  },
  {
    id: 'hi-4',
    question: 'рдХреНрдпрд╛ рд╣реЙрд╕реНрдЯрд▓ рд╕реБрд╡рд┐рдзрд╛рдПрдБ рдЙрдкрд▓рдмреНрдз рд╣реИрдВ?',
    answer: 'рдЖрд░рдИрдпреВ рд▓рдбрд╝рдХреЛрдВ рдФрд░ рд▓рдбрд╝рдХрд┐рдпреЛрдВ рдХреЗ рд▓рд┐рдП рдЕрд▓рдЧ-рдЕрд▓рдЧ рд╣реЙрд╕реНрдЯрд▓ рдкреНрд░рджрд╛рди рдХрд░рддрд╛ рд╣реИ рдЬрд┐рдирдореЗрдВ рд╡рд╛рдИ-рдлрд╛рдИ, рдореЗрд╕, рдЬрд┐рдо, рдЕрдзреНрдпрдпрди рдХрдХреНрд╖, рдФрд░ рд▓реЙрдиреНрдбреНрд░реА рдЬреИрд╕реА рд╕реБрд╡рд┐рдзрд╛рдПрдБ рд╣реИрдВред рдмреЙрдпрдЬ рд╣реЙрд╕реНрдЯрд▓ рдП рдореЗрдВ 400 рдЫрд╛рддреНрд░реЛрдВ рдХреЗ рд▓рд┐рдП рдПрд╕реА/рдиреЙрди-рдПрд╕реА рд╡рд┐рдХрд▓реНрдк рд╣реИрдВ, рдмреЙрдпрдЬ рд╣реЙрд╕реНрдЯрд▓ рдмреА 350 рдЫрд╛рддреНрд░реЛрдВ рдХреЗ рд▓рд┐рдП рдиреЙрди-рдПрд╕реА рд╣реИ, рдФрд░ рдЧрд░реНрд▓реНрд╕ рд╣реЙрд╕реНрдЯрд▓ рдореЗрдВ 300 рдЫрд╛рддреНрд░рд╛рдУрдВ рдХреЗ рд▓рд┐рдП рдПрд╕реА/рдиреЙрди-рдПрд╕реА рд╡рд┐рдХрд▓реНрдк рд╣реИрдВред рдлреАрд╕ тВ╣45,000 рд╕реЗ тВ╣90,000 рдкреНрд░рддрд┐ рд╡рд░реНрд╖ рд╣реИред',
    category: 'рд╣реЙрд╕реНрдЯрд▓',
    keywords: ['рд╣реЙрд╕реНрдЯрд▓', 'рд╕реБрд╡рд┐рдзрд╛рдПрдБ', 'рдЖрд╡рд╛рд╕', 'рдореЗрд╕', 'рд╡рд╛рдИрдлрд╛рдИ'],
    language: 'hi'
  },
  {
    id: 'hi-5',
    question: 'рдкрд░рд┐рд╕рд░ рдореЗрдВ рдХреНрдпрд╛ рдЦреЗрд▓ рд╕реБрд╡рд┐рдзрд╛рдПрдБ рдЙрдкрд▓рдмреНрдз рд╣реИрдВ?',
    answer: 'рдЖрд░рдИрдпреВ рдореЗрдВ рдХреНрд░рд┐рдХреЗрдЯ рдореИрджрд╛рди, рдлреБрдЯрдмреЙрд▓ рдореИрджрд╛рди, рдмрд╛рд╕реНрдХреЗрдЯрдмреЙрд▓ рдХреЛрд░реНрдЯ, рдЗрдирдбреЛрд░ рд╕реНрдкреЛрд░реНрдЯреНрд╕ рдХреЙрдореНрдкреНрд▓реЗрдХреНрд╕, рд╕реНрд╡рд┐рдорд┐рдВрдЧ рдкреВрд▓, рдФрд░ рдЯреЗрдирд┐рд╕ рдХреЛрд░реНрдЯ рд╕рд╣рд┐рдд рдЙрддреНрдХреГрд╖реНрдЯ рдЦреЗрд▓ рд╕реБрд╡рд┐рдзрд╛рдПрдБ рд╣реИрдВред рд╕рднреА рд╕реБрд╡рд┐рдзрд╛рдПрдБ рд╕реБрдмрд╣ 6:00 рдмрдЬреЗ рд╕реЗ рд░рд╛рдд 8:00 рдмрдЬреЗ рддрдХ рдЦреБрд▓реА рд╣реИрдВред рдЗрдирдбреЛрд░ рдХреЙрдореНрдкреНрд▓реЗрдХреНрд╕ рд░рд╛рдд 10:00 рдмрдЬреЗ рддрдХ рдЦреБрд▓рд╛ рд░рд╣рддрд╛ рд╣реИред',
    category: 'рдЦреЗрд▓',
    keywords: ['рдЦреЗрд▓', 'рд╕реБрд╡рд┐рдзрд╛рдПрдБ', 'рдХреНрд░рд┐рдХреЗрдЯ', 'рдлреБрдЯрдмреЙрд▓', 'рдмрд╛рд╕реНрдХреЗрдЯрдмреЙрд▓'],
    language: 'hi'
  }
]

const languageOptions = [
  { code: 'en', name: 'English', flag: 'ЁЯЗ║ЁЯЗ╕' },
  { code: 'hi', name: 'рд╣рд┐рдиреНрджреА', flag: 'ЁЯЗоЁЯЗ│' },
  { code: 'bn', name: 'ржмрж╛ржВрж▓рж╛', flag: 'ЁЯЗзЁЯЗй' },
  { code: 'ta', name: 'родрооро┐ро┤рпН', flag: 'ЁЯЗ▒ЁЯЗ░' },
  { code: 'te', name: 'р░др▒Жр░▓р▒Бр░Чр▒Б', flag: 'ЁЯЗоЁЯЗ│' }
]

export default function Chatbot() {
  const [isOpen, setIsOpen] = useState(false)
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      text: 'рдирдорд╕реНрддреЗ! рдореИрдВ рд░рд╛рдЬрд╕реНрдерд╛рди рдЗрдВрдЬреАрдирд┐рдпрд░рд┐рдВрдЧ рд╡рд┐рд╢реНрд╡рд╡рд┐рджреНрдпрд╛рд▓рдп рдХрд╛ рдЪреИрдЯрдмреЙрдЯ рд╣реВрдБред рдореИрдВ рдЖрдкрдХреА рдХреИрд╕реЗ рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдБ?\n\nHello! I am the Rajasthan Engineering University chatbot. How can I help you today?',
      sender: 'bot',
      timestamp: new Date(),
      language: 'hi'
    }
  ])
  const [inputText, setInputText] = useState('')
  const [selectedLanguage, setSelectedLanguage] = useState('hi')
  const [isLoading, setIsLoading] = useState(false)
  const messagesEndRef = useRef<HTMLDivElement>(null)

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' })
  }

  useEffect(() => {
    scrollToBottom()
  }, [messages])

  const detectLanguage = (text: string): string => {
    // Simple language detection based on script
    const hindiRegex = /[\u0900-\u097F]/
    const bengaliRegex = /[\u0980-\u09FF]/
    const tamilRegex = /[\u0B80-\u0BFF]/
    const teluguRegex = /[\u0C00-\u0C7F]/

    if (hindiRegex.test(text)) return 'hi'
    if (bengaliRegex.test(text)) return 'bn'
    if (tamilRegex.test(text)) return 'ta'
    if (teluguRegex.test(text)) return 'te'
    return 'en'
  }

  const findBestFAQ = (query: string, language: string): FAQ | null => {
    const normalizedQuery = query.toLowerCase()
    
    // Filter FAQs by language first
    const languageFAQs = faqs.filter(faq => faq.language === language)
    
    // If no FAQs in detected language, use English
    const faqsToSearch = languageFAQs.length > 0 ? languageFAQs : faqs.filter(faq => faq.language === 'en')
    
    let bestFAQ: FAQ | null = null
    let highestScore = 0

    faqsToSearch.forEach(faq => {
      let score = 0
      
      // Check for exact question match
      if (faq.question.toLowerCase().includes(normalizedQuery) || normalizedQuery.includes(faq.question.toLowerCase())) {
        score += 10
      }
      
      // Check for keyword matches
      faq.keywords.forEach(keyword => {
        if (normalizedQuery.includes(keyword.toLowerCase())) {
          score += 5
        }
      })
      
      // Check for partial matches
      const queryWords = normalizedQuery.split(' ')
      const faqWords = faq.question.toLowerCase().split(' ')
      
      queryWords.forEach(queryWord => {
        faqWords.forEach(faqWord => {
          if (queryWord === faqWord || faqWord.includes(queryWord) || queryWord.includes(faqWord)) {
            score += 1
          }
        })
      })
      
      if (score > highestScore) {
        highestScore = score
        bestFAQ = faq
      }
    })

    // Only return if we have a reasonable match
    return highestScore >= 3 ? bestFAQ : null
  }

  const generateResponse = async (query: string, language: string): Promise<string> => {
    setIsLoading(true)
    
    try {
      // First try to find a matching FAQ
      const faq = findBestFAQ(query, language)
      
      if (faq) {
        setIsLoading(false)
        return faq.answer
      }
      
      // If no FAQ found, call the backend API
      try {
        const response = await fetch('/api/chatbot', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            message: query,
            sessionId: 'client-session',
            language: language
          }),
        })
        
        if (!response.ok) {
          throw new Error('API request failed')
        }
        
        const data = await response.json()
        setIsLoading(false)
        return data.response || 
          'рдореБрдЭреЗ рдЦреЗрдж рд╣реИ, рдореИрдВ рдЗрд╕ рд╕рд╡рд╛рд▓ рдХрд╛ рдЬрд╡рд╛рдм рдирд╣реАрдВ рджреЗ рд╕рдХрддрд╛ред рдХреГрдкрдпрд╛ рд╡рд┐рд╢реНрд╡рд╡рд┐рджреНрдпрд╛рд▓рдп рдкреНрд░рд╢рд╛рд╕рди рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВред\n\nSorry, I cannot answer this question. Please contact the university administration.'
      } catch (apiError) {
        console.error('API Error:', apiError)
        setIsLoading(false)
        return 'рдореБрдЭреЗ рдЦреЗрдж рд╣реИ, рд╡рд░реНрддрдорд╛рди рдореЗрдВ рддрдХрдиреАрдХреА рд╕рдорд╕реНрдпрд╛ рдХреЗ рдХрд╛рд░рдг рдореИрдВ рдЖрдкрдХреА рд╕рд╣рд╛рдпрддрд╛ рдирд╣реАрдВ рдХрд░ рд╕рдХрддрд╛ред рдХреГрдкрдпрд╛ рдмрд╛рдж рдореЗрдВ рдкреБрди: рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред\n\nSorry, I cannot assist you due to technical issues. Please try again later.'
      }
    } catch (error) {
      console.error('General Error:', error)
      setIsLoading(false)
      return 'рдореБрдЭреЗ рдЦреЗрдж рд╣реИ, рд╡рд░реНрддрдорд╛рди рдореЗрдВ рддрдХрдиреАрдХреА рд╕рдорд╕реНрдпрд╛ рдХреЗ рдХрд╛рд░рдг рдореИрдВ рдЖрдкрдХреА рд╕рд╣рд╛рдпрддрд╛ рдирд╣реАрдВ рдХрд░ рд╕рдХрддрд╛ред рдХреГрдкрдпрд╛ рдмрд╛рдж рдореЗрдВ рдкреБрди: рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред\n\nSorry, I cannot assist you due to technical issues. Please try again later.'
    }
  }

  const handleSend = async () => {
    if (!inputText.trim()) return

    const detectedLanguage = detectLanguage(inputText)
    const userMessage: Message = {
      id: Date.now().toString(),
      text: inputText,
      sender: 'user',
      timestamp: new Date(),
      language: detectedLanguage
    }

    setMessages(prev => [...prev, userMessage])
    setInputText('')
    setIsLoading(true)

    // Generate bot response
    const response = await generateResponse(inputText, detectedLanguage)
    
    const botMessage: Message = {
      id: (Date.now() + 1).toString(),
      text: response,
      sender: 'bot',
      timestamp: new Date(),
      language: detectedLanguage
    }

    setMessages(prev => [...prev, botMessage])
  }

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault()
      handleSend()
    }
  }

  const formatTime = (date: Date) => {
    return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })
  }

  const getGreeting = () => {
    const hour = new Date().getHours()
    if (hour < 12) return 'Good morning'
    if (hour < 17) return 'Good afternoon'
    return 'Good evening'
  }

  if (!isOpen) {
    return (
      <Button
        onClick={() => setIsOpen(true)}
        className="fixed bottom-6 right-6 z-50 rounded-full w-14 h-14 p-0 shadow-lg hover:shadow-xl transition-all duration-300 bg-blue-600 hover:bg-blue-700"
        size="lg"
      >
        <MessageSquare className="h-6 w-6" />
      </Button>
    )
  }

  return (
    <div className="fixed bottom-6 right-6 z-50 w-96 max-w-[calc(100vw-3rem)]">
      <Card className="shadow-2xl border-0">
        <CardHeader className="bg-gradient-to-r from-blue-600 to-purple-600 text-white p-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <Bot className="h-6 w-6" />
              <div>
                <CardTitle className="text-lg">REU Assistant</CardTitle>
                <div className="text-xs opacity-90">{getGreeting()}</div>
              </div>
            </div>
            <div className="flex items-center gap-2">
              <div className="relative">
                <Globe className="h-4 w-4 cursor-pointer" />
                <select
                  value={selectedLanguage}
                  onChange={(e) => setSelectedLanguage(e.target.value)}
                  className="absolute inset-0 opacity-0 cursor-pointer"
                >
                  {languageOptions.map(lang => (
                    <option key={lang.code} value={lang.code}>
                      {lang.name}
                    </option>
                  ))}
                </select>
              </div>
              <Button
                variant="ghost"
                size="icon"
                onClick={() => setIsOpen(false)}
                className="text-white hover:bg-white/20"
              >
                <X className="h-4 w-4" />
              </Button>
            </div>
          </div>
        </CardHeader>
        
        <CardContent className="p-0">
          <ScrollArea className="h-96 p-4">
            <div className="space-y-4">
              {messages.map((message) => (
                <div
                  key={message.id}
                  className={`flex gap-3 ${
                    message.sender === 'user' ? 'justify-end' : 'justify-start'
                  }`}
                >
                  {message.sender === 'bot' && (
                    <div className="flex-shrink-0">
                      <div className="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center">
                        <Bot className="h-4 w-4 text-blue-600" />
                      </div>
                    </div>
                  )}
                  
                  <div
                    className={`max-w-[80%] rounded-lg p-3 ${
                      message.sender === 'user'
                        ? 'bg-blue-600 text-white'
                        : 'bg-gray-100 text-gray-900'
                    }`}
                  >
                    <div className="text-sm whitespace-pre-line">{message.text}</div>
                    <div
                      className={`text-xs mt-1 ${
                        message.sender === 'user' ? 'text-blue-100' : 'text-gray-500'
                      }`}
                    >
                      {formatTime(message.timestamp)}
                    </div>
                  </div>
                  
                  {message.sender === 'user' && (
                    <div className="flex-shrink-0">
                      <div className="w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center">
                        <User className="h-4 w-4 text-white" />
                      </div>
                    </div>
                  )}
                </div>
              ))}
              
              {isLoading && (
                <div className="flex gap-3 justify-start">
                  <div className="flex-shrink-0">
                    <div className="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center">
                      <Bot className="h-4 w-4 text-blue-600" />
                    </div>
                  </div>
                  <div className="bg-gray-100 rounded-lg p-3">
                    <div className="flex gap-1">
                      <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                      <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                      <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                    </div>
                  </div>
                </div>
              )}
              
              <div ref={messagesEndRef} />
            </div>
          </ScrollArea>
          
          <div className="border-t p-4">
            <div className="flex gap-2">
              <Input
                value={inputText}
                onChange={(e) => setInputText(e.target.value)}
                onKeyPress={handleKeyPress}
                placeholder={
                  selectedLanguage === 'hi' ? 'рдЕрдкрдирд╛ рд╕рд╡рд╛рд▓ рдЯрд╛рдЗрдк рдХрд░реЗрдВ...' :
                  selectedLanguage === 'bn' ? 'ржЖржкржирж╛рж░ ржкрзНрж░рж╢рзНржи рж▓рж┐ржЦрзБржи...' :
                  selectedLanguage === 'ta' ? 'роЙроЩрпНроХро│рпН роХрпЗро│рпНро╡ро┐ропрпИ родроЯрпНроЯроЪрпНроЪрпБ роЪрпЖропрпНропро╡рпБроорпН...' :
                  selectedLanguage === 'te' ? 'р░ор▒А р░кр▒Нр░░р░╢р▒Нр░ир░ир▒Б р░Яр▒Ир░кр▒Н р░Ър▒Зр░пр░Вр░бр░┐...' :
                  'Type your question...'
                }
                disabled={isLoading}
                className="flex-1"
              />
              <Button
                onClick={handleSend}
                disabled={!inputText.trim() || isLoading}
                size="icon"
              >
                <Send className="h-4 w-4" />
              </Button>
            </div>
            
            <div className="flex flex-wrap gap-2 mt-3">
              <Badge variant="outline" className="text-xs cursor-pointer hover:bg-gray-100">
                <HelpCircle className="h-3 w-3 mr-1" />
                {selectedLanguage === 'hi' ? 'рдкреНрд░рд╡реЗрд╢' : 'Admissions'}
              </Badge>
              <Badge variant="outline" className="text-xs cursor-pointer hover:bg-gray-100">
                <Clock className="h-3 w-3 mr-1" />
                {selectedLanguage === 'hi' ? 'рдлреАрд╕' : 'Fees'}
              </Badge>
              <Badge variant="outline" className="text-xs cursor-pointer hover:bg-gray-100">
                <Mail className="h-3 w-3 mr-1" />
                {selectedLanguage === 'hi' ? 'рд╣реЙрд╕реНрдЯрд▓' : 'Hostel'}
              </Badge>
              <Badge variant="outline" className="text-xs cursor-pointer hover:bg-gray-100">
                <Phone className="h-3 w-3 mr-1" />
                {selectedLanguage === 'hi' ? 'рд╕рдВрдкрд░реНрдХ' : 'Contact'}
              </Badge>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  )
}